package logger_test

import (
	"github.com/exPriceD/Streaming-platform/pkg/logger"
	"log/slog"
	"os"
	"testing"
	"time"
)

// TestLogger –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ–≤
func TestLogger(t *testing.T) {
	log := logger.InitLogger("test-service")

	log.Info("üöÄ –õ–æ–≥–≥–µ—Ä —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è!", slog.String("env", "testing"))
	log.Warn("‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!")
	log.Error("‚ùå –û—à–∏–±–∫–∞!", slog.String("trace_id", "abc-1234"))

	time.Sleep(500 * time.Millisecond)

	logDir := "logs"
	logFilePath := logDir + "/test-service.log"
	jsonLogFilePath := logDir + "/test-service.json"

	checkFileExists(t, logFilePath)
	checkFileExists(t, jsonLogFilePath)

	// –ú–æ–∂–Ω–æ –¥–æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ª–æ–≥–æ–≤
}

// checkFileExists –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
func checkFileExists(t *testing.T, filePath string) {
	_, err := os.Stat(filePath)
	if err == nil {
		t.Logf("‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: %s", filePath)
	} else if os.IsNotExist(err) {
		t.Errorf("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", filePath)
	} else {
		t.Errorf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ %s: %v", filePath, err)
	}
}

// checkLogContent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–∞–π–ª–µ
func checkLogContent(t *testing.T, filePath, expected string) {
	// –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
	// –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ contains
}

// contains –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ
func contains(str, substr string) {
	// –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É
}
