package main

import (
	"context"
	"fmt"
	pb "github.com/exPriceD/Streaming-platform/services/auth-service/proto"
	"github.com/stretchr/testify/assert"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"
	"log"
	"testing"
)

const authServiceAddr = "localhost:50051"

func TestClient(t *testing.T) {
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ gRPC-—Å–µ—Ä–≤–µ—Ä—É
	conn, err := grpc.NewClient("localhost:50051", grpc.WithTransportCredentials(insecure.NewCredentials()))
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %v", err)
	}
	defer func(conn *grpc.ClientConn) {
		err := conn.Close()
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %v", err)
		}
	}(conn)

	client := pb.NewAuthServiceClient(conn)

	// üîπ –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
	fmt.Println("\nüîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤")

	userID := "550e8400-e29b-41d4-a716-446655440000"
	generateReq := &pb.AuthenticateRequest{UserId: userID}
	generateResp, err := runTestCase(t, "GenerateTokens", func() (*pb.AuthenticateResponse, error) {
		return client.Authenticate(context.Background(), generateReq)
	})

	assert.NoError(t, err)
	assert.NotEmpty(t, generateResp.AccessToken)
	assert.NotEmpty(t, generateResp.RefreshToken)

	// üîπ –®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è access_token
	fmt.Println("\nüîπ –í–∞–ª–∏–¥–∞—Ü–∏—è access_token")
	validateReq := &pb.ValidateTokenRequest{AccessToken: generateResp.AccessToken}

	validateResp, err := runTestCase(t, "ValidateToken", func() (*pb.ValidateTokenResponse, error) {
		return client.ValidateToken(context.Background(), validateReq)
	})
	assert.NoError(t, err)
	assert.True(t, validateResp.Valid)
	assert.Equal(t, userID, validateResp.UserId)

	// üîπ –®–∞–≥ 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
	fmt.Println("\nüîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token")
	refreshReq := &pb.RefreshTokenRequest{RefreshToken: generateResp.RefreshToken}

	refreshResp, err := runTestCase(t, "RefreshToken", func() (*pb.RefreshTokenResponse, error) {
		return client.RefreshToken(context.Background(), refreshReq)
	})
	assert.NoError(t, err)
	assert.NotEmpty(t, refreshResp.AccessToken)
	assert.NotEmpty(t, refreshResp.RefreshToken)

	// üîπ –®–∞–≥ 4: –í—ã—Ö–æ–¥ (Logout)
	fmt.Println("\nüîπ Logout")
	logoutReq := &pb.LogoutRequest{RefreshToken: generateResp.RefreshToken}

	_, err = runTestCase(t, "Logout", func() (*pb.LogoutResponse, error) {
		return client.Logout(context.Background(), logoutReq)
	})
	assert.NoError(t, err)
}

func runTestCase[T any](t *testing.T, testName string, fn func() (T, error)) (T, error) {
	fmt.Printf("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º %s...\n", testName)
	result, err := fn()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤ %s: %v\n", testName, err)
		t.Fatalf("‚ùå %s –ø—Ä–æ–≤–∞–ª–µ–Ω: %v", testName, err)
	} else {
		fmt.Printf("‚úÖ %s –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n", testName)
	}
	return result, err
}
