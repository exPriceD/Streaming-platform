// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Аутентифицирует пользователя по логину и паролю, возвращает идентификатор и access токен. При неверных данных возвращает ошибку.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация пользователя",
                "parameters": [
                    {
                        "description": "Данные для авторизации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpTransport.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная авторизация",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Неверные учетные данные или ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Завершает сессию пользователя, удаляя refresh-токен из cookies. Требует refresh-токен в куках.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Выход пользователя",
                "responses": {
                    "200": {
                        "description": "Успешный выход",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.LogoutResponse"
                        }
                    },
                    "401": {
                        "description": "Refresh-токен отсутствует",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Создаёт нового пользователя и возвращает идентификатор пользователя и токен доступа. Если пользователь с таким email уже существует, возвращает ошибку.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя для регистрации",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/httpTransport.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная регистрация",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.RegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Неверный формат запроса",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (например, email уже существует)",
                        "schema": {
                            "$ref": "#/definitions/httpTransport.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "httpTransport.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Invalid request payload"
                }
            }
        },
        "httpTransport.LoginRequest": {
            "type": "object",
            "properties": {
                "login_identifier": {
                    "type": "string",
                    "example": "john_doe"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                }
            }
        },
        "httpTransport.LogoutResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User logged out successfully"
                }
            }
        },
        "httpTransport.RegisterRequest": {
            "type": "object",
            "properties": {
                "confirm_password": {
                    "type": "string",
                    "example": "password123"
                },
                "consent": {
                    "type": "boolean",
                    "example": true
                },
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "john_doe"
                }
            }
        },
        "httpTransport.RegisterResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "message": {
                    "type": "string",
                    "example": "User registered successfully"
                },
                "user_id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Bearer token (JWT) для авторизации",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "CookieAuth": {
            "description": "Refresh-токен в куках для аутентификации",
            "type": "apiKey",
            "name": "refreshToken",
            "in": "cookie"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "User Service API",
	Description:      "API для управления пользователями в стриминговой платформе",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
